# -*- coding: utf-8 -*-
"""RAG assignment1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1IfRT6pBe4XvX9yGY0lQHO8-l5reQSaCL
"""

#required dependencis
!pip install  langchain langchain-core langchain-community langchain-groq langchain-text-splitters langgraph

#load document
import bs4
from langchain_community.document_loaders import WebBaseLoader

#only keep title, headers, and content from the full html
bs4_strainer = bs4.SoupStrainer(class_=("post-title", "post-header", "post-content"))
loader = WebBaseLoader(
    web_paths=("https://lilianweng.github.io/posts/2023-06-23-agent/",),
    bs_kwargs={"parse_only": bs4_strainer},
)
docs = loader.load()

assert len(docs) == 1
print(f"Total characters: {len(docs[0].page_content)}")

#Splitting documents
from langchain_text_splitters import RecursiveCharacterTextSplitter
text_splitter = RecursiveCharacterTextSplitter(
    chunk_size = 1000,
    chunk_overlap= 200,
    add_start_index = True,
)
all_splits = text_splitter.split_documents(docs)
print(f"Split blog post into {len(all_splits)} sub-documents.")

#Embeddings
!pip install -qU langchain-huggingface
from langchain_huggingface import HunggingFaceEmbeddings

embeddings = HuggingFaceEmbeddings(model_name = "sentence-transformers/all-mpnet-base-v2")
vector_1 = embeddings.embed_query(all_splits[0].page_content)
vector_2 = embeddings.embed_query(all_splits[1].page_content)

assert len(vector_1) == len(vector_2)
print(f"Generated vector of length {len(vector_1)}\n")
print(vector_1[:10])

#Vector stores
from langchain_core.vectorstores import InMemoryVectorStore
vector_store = InMemoryVectorStore(embeddings)

#Storing documents
document_ids = vector_store.add_documents(documents = all_splits)
print(document_ids[:3])

#llm initialize
from google.colab import userdata
GROQ_API_KEY = userdata.get("GROQ_API_KEY")
if GROQ_API_KEY is None:
  raise ValueError("Set valid API KEY")
from langchain.chat_models import init_chat_model
llm = init_chat_model(groq_api_key = GROQ_API_KEY, model="meta-llama/llama-4-scout-17b-16e-instruct", model_provider = "groq")

#Retrieval and Generation
from langgraph.graph import StateGraph
from langchain_core.messages import SystemMessage, HumanMessage, AIMessage, ToolMessage # Import necessary message types

graph_builder = StateGraph(list) # Define state as a list of messages

from langchain_core.tools import tool


@tool(response_format="content_and_artifact")
def retrieve(query: str):
    """Retrieve information related to a query."""
    retrieved_docs = vector_store.similarity_search(query, k=2)
    serialized = "\n\n".join(
        (f"Source: {doc.metadata}\n" f"Content: {doc.page_content}")
        for doc in retrieved_docs
    )
    return serialized, retrieved_docs

from langgraph.prebuilt import ToolNode


# Step 1: Generate an AIMessage that may include a tool-call to be sent.
def query_or_respond(state: list): # Use list as type hint for state
    """Generate tool call for retrieval or respond."""
    llm_with_tools = llm.bind_tools([retrieve])
    response = llm_with_tools.invoke(state) # Pass the state (list of messages) directly
    return state + [response] # Append the new message to the state


# Step 2: Execute the retrieval.
tools = ToolNode([retrieve])


# Step 3: Generate a response using the retrieved content.
def generate(state: list): # Use list as type hint for state
    """Generate answer."""
    # Get generated ToolMessages
    recent_tool_messages = []
    for message in reversed(state): # Iterate over the list of messages
        if message.type == "tool":
            recent_tool_messages.append(message)
        else:
            break
    tool_messages = recent_tool_messages[::-1]

    # Format into prompt
    docs_content = "\n\n".join(doc.content for doc in tool_messages)
    system_message_content = (
        "You are an assistant for question-answering tasks. "
        "Use the following pieces of retrieved context to answer "
        "the question. If you don't know the answer, say that you "
        "don't know. Use three sentences maximum and keep the "
        "answer concise."
        "\n\n"
        f"{docs_content}"
    )
    # Filter out tool messages from the conversation history for the final prompt
    conversation_messages = [
        message
        for message in state
        if message.type in ("human", "system")
        or (message.type == "ai" and not message.tool_calls)
    ]
    prompt = [SystemMessage(system_message_content)] + conversation_messages

    # Run
    response = llm.invoke(prompt)
    return state + [response] # Append the new message to the state


from langgraph.graph import END
from langgraph import prebuilt # Import prebuilt for tools_condition

graph_builder.add_node(query_or_respond)
graph_builder.add_node(tools)
graph_builder.add_node(generate)

graph_builder.set_entry_point("query_or_respond")
graph_builder.add_conditional_edges(
    "query_or_respond",
    prebuilt.tools_condition, # Use tools_condition from prebuilt
    {END: END, "tools": "tools"},
)
graph_builder.add_edge("tools", "generate")
graph_builder.add_edge("generate", END)

graph = graph_builder.compile()

from IPython.display import Image, display

display(Image(graph.get_graph().draw_mermaid_png()))

from langchain_core.messages import HumanMessage # Import HumanMessage

input_message = "What is Task Decomposition?"

# Pass initial messages as a list of HumanMessage objects
initial_messages = [HumanMessage(content=input_message)]

for step in graph.stream(
    initial_messages, # Pass initial messages as a list of HumanMessage objects
    stream_mode="values",
):
    # Access the last message in the list
    if isinstance(step, dict) and "messages" in step and step["messages"]:
        last_message = step["messages"][-1]
        # Check if the last message is a tuple and convert it to a HumanMessage if it's a user message
        if isinstance(last_message, tuple) and last_message[0] == "user":
            last_message = HumanMessage(content=last_message[1])
        last_message.pretty_print()
    elif isinstance(step, list) and step:
        last_message = step[-1]
        # Check if the last message is a tuple and convert it to a HumanMessage if it's a user message
        if isinstance(last_message, tuple) and last_message[0] == "user":
            last_message = HumanMessage(content=last_message[1])
        last_message.pretty_print()

#Stateful management of chat histor
from langgraph.checkpoint.memory import MemorySaver
from langchain_core.messages import HumanMessage # Import HumanMessage

memory = MemorySaver()
graph = graph_builder.compile(checkpointer=memory)

# Specify an ID for the thread
config = {"configurable": {"thread_id": "abc123"}}

input_message = "What is Task Decomposition?"

for step in graph.stream(
    [HumanMessage(content=input_message)], # Pass initial messages as a list of HumanMessage objects
    stream_mode="values",
    config=config,
):
    # Access the last message in the list
    if isinstance(step, dict) and "messages" in step and step["messages"]:
        last_message = step["messages"][-1]
        # Check if the last message is a tuple and convert it to a HumanMessage if it's a user message
        if isinstance(last_message, tuple) and last_message[0] == "user":
            last_message = HumanMessage(content=last_message[1])
        last_message.pretty_print()
    elif isinstance(step, list) and step:
        last_message = step[-1]
        # Check if the last message is a tuple and convert it to a HumanMessage if it's a user message
        if isinstance(last_message, tuple) and last_message[0] == "user":
            last_message = HumanMessage(content=last_message[1])
        last_message.pretty_print()

#Agents
from langgraph.prebuilt import create_react_agent

agent_executor = create_react_agent(llm, [retrieve], checkpointer=memory)

display(Image(agent_executor.get_graph().draw_mermaid_png()))

config = {"configurable": {"thread_id": "def234"}}

input_message = (
    "What is the standard method for Task Decomposition?\n\n"
    "Once you get the answer, look up common extensions of that method."
)

for event in agent_executor.stream(
    {"messages": [{"role": "user", "content": input_message}]},
    stream_mode="values",
    config=config,
):
    event["messages"][-1].pretty_print()